-----------------
section2
-----------------

# setup
gem install -N sinatra
gem install -N sinatra-reloader

-----------------
section3
-----------------
sinatraのディレクトリ
* viewsディレクトリ … sinatraがテンプレート配置場所として認識してくれるので、erbテンプレートをここに配置するとrubyで読み込めるようになる
* publicディレクトリ … sinatraが静的コンテンツ配置場所として認識してくれるので、cssなどの静的コンテンツを配置するとhtmlで参照できるようになる

Fromタグ
* action … このFormを実行すると呼び出されるaction(submitされると次はこのURLにhttpリクエストが飛ぶ)
* method … action呼び出し時のhttpメソッド
* input … inputの一つ一つがパラメータとなって渡る。name=がパラメータ名（key）で、valueは入力した値が渡る。typeは画面の入力方法。

http
* GETはページの読み取りリクエスト
* POSTはデータをサーバに送信するリクエスト

リダイレクト
* リダイレクトとはサーバがクライアントに対して「こっちのページにアクセスし直して」という挙動
* サーバはhttpステータス300番台とhttpヘッダにlocationヘッダを返してくる
* クライアントはそれに従って、locationにアクセスし直す
* chromeのデベロッパーツールでリクエストの流れを実際に確認するとわかりやすい

-----------------
section4
-----------------
bunderとは、
gemのパッケージ管理ツール。
gem同士の依存関係の解決やバージョン管理が行えるようになる。

Gemfileに必要なパッケージを記載すると、それに従ってgemのインストールを実施してくれる。

- 使い方
  参考URL:https://bundler.io/v1.16/guides/sinatra.html

# bunderインストール
gem install bunder

# 初期化(Gemfile作成)
bundle init

# Gemfileにsinatraを追記
vim Gemfile

# gemを利用するアプリケーションのrequireを以下の３行に変更することで、
# 使うgemをいちいち全部require書かなくてもbunderで入れたものは利用できるようになる。
require 'rubygems'
require 'bundler'
Bundler.require #Bundlerクラスのクラスメソッドrequireを実行している。

# bundlerにてgemをインストール
bundle install --path vendor/bundle
※pathで指定したディレクトリ配下にgemの実態がインストールされる。
※vendor/bundleというディレクトリ名が一般的。このディレクトリは.gitignoreでgitへの追加は抑止すべき。

# bunder経由でアプリ実行
bundle exec ruby app.rb


- ActiveRecord導入
  参考URL:https://github.com/janko/sinatra-activerecord

# Gemfileに下記追加
gem "sinatra-activerecord"
gem "sqlite3"
gem "rake"

# app.rbに下記追加
set :database, {adapter: "sqlite3", database: "contacts.sqlite3"}

# gemインストール
bundle install

# Rakefileを下記内容で作成
    # Rakefile
    require "sinatra/activerecord/rake"
    
    namespace :db do
      task :load_config do
        require "./app"
      end
    end

# rakeコマンドが実行できるか確認
bundle exec rake -T

# migrateファイル(DBとテーブルを作成するための定義)の雛形を作成
bundle exec rake db:create_migration NAME=create_contacts

# 作成したmigrateファイルに下記の通りテーブルの定義を追加
    create_table :contacts do |t|
      t.string :name
    end

# migrateを実行してDB/テーブルを作成
bundle exec rake db:migrate

# sqlite3でのDB接続
sqllite3 contacts.sqlite3 # sqlite3コマンドでDBファイルを指定して接続

ActiveRecord
CRUD ActiveRecordのメソッド
C    find,all #allだと全件
R    create -> save
U    update -> save
D    destroy

ActiveRecordを使うメリット
DBのスキーマ定義をアプリケーションコードと一緒にgitで管理することができる。
* 変更履歴をアプリケーションと一緒に追える
* アプリケーションとDBを合わせて変更する必要がある場合一つのPullRequestにまとめられるので、
  アプリケーションとDBの不整合を防ぐことが出来る
* 複数人で開発する場合、全員が最新状態を参照できる

-----------------
section5
-----------------
sessionとは
httpは一回ごとの通信で処理は終わる。画面遷移をすると別の画面では前の画面の情報は知ることが出来ない。
なので、サーバ側でDBに保存して別の画面ではDBから読み取ることで別のhttpリクエストでも情報を参照できるようにする。
ただし、ちょっとした情報をいちいちDBに格納するのは面倒だし効率も悪く、処理も遅くなる。
そこで登場するのがsession。
厳密にはsession情報もDBに持つ場合もあるので、その場合は処理効率の悪さ、処理の遅さは解消できないが、
アプリケーションのコードは簡単になる。
DB以外にはcookie、サーバサイドのsesionファイル、RedsなどのKVSに情報を保存する。
sinatraの場合、デフォルトではcookieに保存される。
rack.sessonというcookieに入っているが、デコードされているのでそのままでは確認できない。
decode.rbでdecodeすると確認できる。


irb
irb -r rubyファイル名で、指定したファイルを読み込んでirbが起動できる

# 連絡先の全件取得
Contact.all

# 連絡先の1件取得
Contact.find(1) # 1はid

# 連絡先の削除
c = Contact.find(1) #Contactクラスのクラスメソッドfindを呼び出して返ってきたインスタンスをcに入れる
c.destroy #インスタンスメソッドdestroyを呼び出して削除

# 連絡先全件削除
Contact.destroy_all

# 連絡先を1件追加
Contact.create(name: "さいしょ")


-----------------
section6
-----------------
# migrateファイル(DBとテーブルを作成するための定義)の雛形を作成
bundle exec rake db:create_migration NAME=add_email_to_contscts

# 作成したmigrateファイルに下記の通りカラムの定義を追加
    add_column :contacts, :email, :string

# migrateを実行してDB/テーブルを作成
bundle exec rake db:migrate

# migrateを実行してDB/テーブルを作成
bundle exec rake db:rollback


emailのvalidationを追加して、画面からではなくirbで確認できる
# validationの追加はapp.rbで
  validates_presence_of :email

# 動作確認のためirb起動
irb -r ./app.rb

# 引数なしでcreateするとエラーになるはずなので実行すると、失敗してrollbackしていることはわかるが、
# validationのエラーメッセージは出ない
2.6.3 :002 > Contact.create
D, [2019-06-30T14:01:27.467483 #14500] DEBUG -- :    (0.1ms)  begin transaction
D, [2019-06-30T14:01:27.474604 #14500] DEBUG -- :    (0.1ms)  rollback transaction
 => #<Contact id: nil, name: nil, email: nil> 
2.6.3 :003 > 

# create!メソッドで詳細なエラーが確認できる。想定どおりエラーで弾かれていることがわかる
2.6.3 :003 > Contact.create!
D, [2019-06-30T14:03:33.237516 #14500] DEBUG -- :    (0.1ms)  begin transaction
D, [2019-06-30T14:03:33.239241 #14500] DEBUG -- :    (0.0ms)  rollback transaction
Traceback (most recent call last):
       16: from /home/ec2-user/.rvm/rubies/ruby-2.6.3/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'
  (stack traceは省略)
        1: from /home/ec2-user/environment/udemy/understand_rails_by_sinatra/contacts/vendor/bundle/ruby/2.6.0/gems/activerecord-5.2.3/lib/active_record/validations.rb:80:in `raise_validation_error'
ActiveRecord::RecordInvalid (Validation failed: Name can't be blank, Email can't be blank)

